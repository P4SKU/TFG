Prolog is a declarative programming language used to solve problems where objects and relationships between them exist.
Declarative languages differ from imperative languages in the fact that they are based on abstract formalisms.
Prolog is based on first-order or predicate logic, so its semantics do not depend on the machine it runs on.
Prolog seeks to gain knowledge by stating facts about objects and their relationships, creating rules about those objects and relationships, and asking questions in that domain.
Prolog is based on the following basic mechanisms: unification, tree-based data structures and backtracking. 
Prolog was created in the 1980s at the University of Provence by Alain Colmerauer and Philippe Roussel.
'Prolog' derives from the French 'programmation en logique'.
Prolog was designed for natural language processing and logical reasoning. 
The first implementation of Prolog was an interpreter written in Fortran by Gerard Battani and Henri Meloni.
Prolog was preferred by European artificial intelligence researchers, while American AI researchers preferred to use the Lisp programming language, leading to a continuing debate about which of the two languages is better in this field.
In Prolog lists are made up of a 'Head' and a 'Tail'. They are represented as a series of elements separated by commas and enclosed in square brackets.
A variable that is not instantiated can be matched with any object, so a list can be matched with a variable.
One of the applications for which Prolog was originally conceived by its author Alain Colmerauer was natural language processing. This is achieved in Prolog thanks to the use of Definitive Clauses Grammar (DCG).
One of the most important applications for which Prolog was recognized in the world was for its participation in the fifth generation of computers.
In First-Order Logic, terms are classified into three categories: constants, variables, and compound terms.
Most Prolog programs are organized into four main sections: Domain: where the arguments to be used by the predicates are declared. Predicates: where all the non-predefined predicates that will be used in the following sections are declared. Goals: This section allows to run the programs non-interactively, and will therefore look for the desired solution as soon as the program is run. As it is also common to use Prolog interactively, it is common to run a program and then wait to be asked about the objectives. Clauses: where the facts and rules that we know about the domain are written.
A fact is a relationship between objects. They are the simplest statement type in Prolog and they declare the values that are true for a predicate.
On a set of facts, a series of questions can be defined to extract knowledge from the database generated by the facts.
Queries begin with a question mark followed by a hyphen '?-' and end with a dot '.'
The answers to a query can be 'true', 'false' or the value that a defined variable can take.
There is a special variable, the anonymous or white variable. This variable is used in the same way as other variables, but it never takes a value.
Variables must start with a capital letter. They can also be the wildcard (_).
Rules declare the conditions for a predicate to be true.
A rule is made up of a Head and a Body. The Body is made up of goals. Example: Head :- goal1, goal2, ...
The great power of Prolog consists of the definition of recursive rules, although simple rules can also be defined.
When we want to compare expressions (eg predicates, complex terms), we add an @ immediately after the first expression (X @< Y). 
A list is an ordered sequence of elements and can be of any length. An element can be any data type, Â¡even another list!